package academia;

import static academia.VentanaP.raiz;
import arbolesylistas.GuardaArchivos;
import arbolesylistas.ListaSL;
import arbolesylistas.Multilistas;
import static arbolesylistas.Multilistas.busca;
import arbolesylistas.Nodo;
import arbolesylistas.TablasHash;
import cjb.ci.CtrlInterfaz;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ItemEvent;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author Daniel Castrejon
 */
public class VtnEliminacionIns extends javax.swing.JFrame
{

    /**
     * Creates new form VtnEliminacionIns
     */
    public VtnEliminacionIns()
    {
        initComponents();
        actualizarUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        elimPanel = new FondoPanelp();
        elimLabel = new javax.swing.JLabel();
        tecElimComboBox = new javax.swing.JComboBox<>();
        elimButton = new javax.swing.JButton();
        Cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        elimPanel.setBackground(new java.awt.Color(30, 49, 106));

        elimLabel.setForeground(new java.awt.Color(255, 255, 255));
        elimLabel.setText("Seleccione la Instituci√≥n a eliminar");

        tecElimComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));
        tecElimComboBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                tecElimComboBoxItemStateChanged(evt);
            }
        });

        elimButton.setBackground(new java.awt.Color(255, 255, 255));
        elimButton.setText("Eliminar");
        elimButton.setToolTipText("");
        elimButton.setEnabled(false);
        elimButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                elimButtonActionPerformed(evt);
            }
        });
        elimButton.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                elimButtonKeyPressed(evt);
            }
        });

        Cancelar.setText("Cancelar");
        Cancelar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout elimPanelLayout = new javax.swing.GroupLayout(elimPanel);
        elimPanel.setLayout(elimPanelLayout);
        elimPanelLayout.setHorizontalGroup(
            elimPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(elimPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(elimPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(elimPanelLayout.createSequentialGroup()
                        .addGroup(elimPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(elimLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                            .addComponent(tecElimComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(93, Short.MAX_VALUE))
                    .addGroup(elimPanelLayout.createSequentialGroup()
                        .addComponent(Cancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(elimButton)
                        .addGap(20, 20, 20))))
        );
        elimPanelLayout.setVerticalGroup(
            elimPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, elimPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(elimLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tecElimComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(elimPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(elimButton)
                    .addComponent(Cancelar))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(elimPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(elimPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void elimButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_elimButtonActionPerformed
    {//GEN-HEADEREND:event_elimButtonActionPerformed
        try
        {
            if (tecElimComboBox.getSelectedItem().toString().equalsIgnoreCase("Seleccione") || tecElimComboBox.getSelectedItem().toString().equalsIgnoreCase(""))
            {
                JOptionPane.showMessageDialog(this, "Opcion Invalida");
            } else
            {
                String etiqueta1[] = new String[1];
                etiqueta1[0] = tecElimComboBox.getSelectedItem().toString();
                String etq[] = new String[2];
                etq[0] = tecElimComboBox.getSelectedItem().toString();
                ListaSL ls = BuscarCarreras(VentanaP.raiz, etq, 0);
                eliminarDArbol(ls);
                VentanaP.s = Multilistas.elimina(VentanaP.raiz, 0, etiqueta1);
                VentanaP.raiz = VentanaP.s[0];
                JOptionPane.showMessageDialog(null, "Institucion eliminada");
                VentanaP v = new VentanaP();
                v.setVisible(true);
                this.dispose();

            }
        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "ERROR");
        }
    }//GEN-LAST:event_elimButtonActionPerformed

    private void elimButtonKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_elimButtonKeyPressed
    {//GEN-HEADEREND:event_elimButtonKeyPressed
        if (evt.getKeyChar() == '\n')
        {
            elimButtonActionPerformed(null);
        }
    }//GEN-LAST:event_elimButtonKeyPressed

    private void tecElimComboBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_tecElimComboBoxItemStateChanged
    {//GEN-HEADEREND:event_tecElimComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            if (tecElimComboBox.getSelectedItem().toString().equalsIgnoreCase("Seleccione") || tecElimComboBox.getSelectedItem().toString().equalsIgnoreCase(""))
            {
                //deshabilitaButton(elimButton);
                CtrlInterfaz.habilita(false, elimButton);
            } else
            {
                CtrlInterfaz.habilita(true, elimButton);
                //habilitarButton(elimButton);
            }
        }
    }//GEN-LAST:event_tecElimComboBoxItemStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        VentanaP v = new VentanaP();
        v.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CancelarActionPerformed
    {//GEN-HEADEREND:event_CancelarActionPerformed
        VentanaP v = new VentanaP();
        v.setVisible(true);
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_CancelarActionPerformed
    public String desp0(Nodo raiz, int nivel)
    {
        String s = "";
        if (raiz != null)
        {
            s = raiz.getEtiqueta();
            tecElimComboBox.addItem(s);
            desp0(raiz.getSig(), 0);
        }
        return s;
    }

    public void actualizarUI()
    {
//        GuardaArchivos.guardar(VentanaP.raiz, "Multilista.dat");
        desp0(VentanaP.raiz, 0);
    }

    public void habilitarButton(JButton jbutton)
    {
        jbutton.setEnabled(true);
        jbutton.requestFocus();
    }

    public void deshabilitaButton(JButton jbutton)
    {
        jbutton.setEnabled(false);
        //jbutton.requestFocus();
    }

    public ListaSL BuscarCarreras(Nodo raiz, String[] etiqueta, int nivel)
    {
        if (nivel == etiqueta.length - 1)
        {
            Nodo aux = raiz;
            ListaSL ls = new ListaSL();
            ls.setRaiz(raiz);
            return ls;
        } else
        {
            Nodo aux = busca(raiz, etiqueta[nivel]);
            if (aux == null)
            {
                return null;
            } else
            {
                return BuscarCarreras(aux.getAbj(), etiqueta, nivel + 1);
            }
        }
    }

    public void eliminarDArbol(ListaSL ls)
    {
        if (ls.getRaiz() == null)
        {
            System.out.println("NO TIENE CARRERAS");
        } else
        {
            Nodo aux = ls.getRaiz();
            while (aux != null)
            {
                VentanaP.rHash = TablasHash.elimina(VentanaP.rHash,aux.getEtiqueta().toLowerCase(), aux);
                aux = aux.getSig();
            }

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(VtnEliminacionIns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(VtnEliminacionIns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(VtnEliminacionIns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(VtnEliminacionIns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new VtnEliminacionIns().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancelar;
    private javax.swing.JButton elimButton;
    private javax.swing.JLabel elimLabel;
    private javax.swing.JPanel elimPanel;
    private javax.swing.JComboBox<String> tecElimComboBox;
    // End of variables declaration//GEN-END:variables
class FondoPanelg extends JPanel
    {

        private Image imagen;

        @Override
        public void paint(Graphics g)
        {
            imagen = new ImageIcon(getClass().getResource("/imagenes/fondog.jpg")).getImage();
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);
            setOpaque(false);
            super.paint(g);
        }
    }

    class FondoPanelp extends JPanel
    {

        private Image imagen;

        @Override
        public void paint(Graphics g)
        {
            imagen = new ImageIcon(getClass().getResource("/imagenes/fondop.jpg")).getImage();
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);
            setOpaque(false);
            super.paint(g);
        }
    }
}
