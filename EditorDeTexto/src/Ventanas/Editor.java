/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Edd.Listas;
import Edd.Multilistas;
import Edd.Nodo;
import java.awt.event.KeyEvent;
import javax.swing.JTextArea;

/**
 *
 * @author emanu
 */
public class Editor extends javax.swing.JFrame {

    public static int cont = 1;
    public static String etq[] = new String[1];
    static Nodo r = null;
    Nodo letraA;
    Nodo nr = null;
    int posc = -1;

    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        texto = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        texto.setColumns(20);
        texto.setRows(5);
        texto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textoKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(texto);

        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoKeyTyped
//        System.out.println(texto.getText().toString());
    }//GEN-LAST:event_textoKeyTyped

    private void textoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoKeyReleased
//        System.out.println(texto.getCaretPosition());

//        String cadena = texto.getText();
//        char caracter = evt.getKeyChar();
//
//        if (evt.getExtendedKeyCode() == 36) {//inicio
//            if (r == null) {
//                System.out.println("lista vacia");
//            } else {
//                System.out.println(" inicio");
//                Nodo recibido = nuevaraiz();
////                texto.setCaretPosition(1);
//                System.out.println(recibido.getDatos());
//            }
//
//        } else if (caracter == 10) {//enter
//            cont++;
//            posc = -1;
//            
//
//        } else if (evt.getExtendedKeyCode() == 35) {//fin
//            System.out.println(" Fin");
//            letraA = nuevaraiz().getAnt();
//            System.out.println(letraA.getDatos());
//
//        } else if (evt.getExtendedKeyCode() == 127) {//suprimir
//
//            System.out.println(" Supr");
//
//        } else if (evt.getExtendedKeyCode() == 40) {//abajo
//            System.out.println("  Abajo");
//          
//            if (r == null) {
//                System.out.println("No hay datos en la lista");
//            } else {
//                Nodo re = nuevaraiz().getAbj();
//                if (posc == 0) {
//                    letraA = re;
//                } else {
//                    letraA = re;
//                    letraA = posicionar();
//                }
//                System.out.println("Letra actual: " + letraA.getDatos());
//                cont++;  
//            }
//
//        } else if (evt.getExtendedKeyCode() == 38) {//arriba
//            System.out.println("  Arriba");
//            if (r == null) {
//                System.out.println("No hay datos en la lista");
//            } else {
//                Nodo rec = nuevaraiz();
//                if (posc == 0) {
//                    letraA = rec.getArr();
//                } else {
//                    if (rec == null) {
//                        posc = -1;
//                    } else {
//                        letraA = rec.getArr();
//                        letraA = posicionar();
//
//                    }
//                }
//                System.out.println("Letra Actual: " + letraA.getDatos());
//                
//                cont--;
//                System.out.println(cont);
//            }
//        } else if (evt.getExtendedKeyCode() == 39) {//derecha
//            System.out.println("  Derecha");
//            Nodo aux = letraA;
//            if (r == null) {
//                System.out.println("lista vacia");
//            } else {
//                letraA = aux.getSig();
//                System.out.println("Letra actual:" + letraA.getDatos());
//                posc++;
//            }
////            r = r.getSig();
//        } else if (evt.getExtendedKeyCode() == 37) {//izquierda
//            System.out.println("  Izquierda");
//            Nodo aux = letraA.getAnt();
//            if (letraA == r) {
//                System.out.println("no se puede avanzar hacia la izquierda");
////                posc=-1;
//            } else {
//                System.out.println("letra actual:  " + aux.getDatos());
//                letraA = aux;
//                posc--;
//            }
//
//        } else if (evt.getExtendedKeyCode() == 34) {//avpag
//            System.out.println(" AvPag");
//            letraA=bajar17().getAnt();
//            System.out.println(letraA.getDatos());
//
//        } else if (evt.getExtendedKeyCode() == 33) {//repag
//            System.out.println(" RePag");
//            letraA=subir17().getAnt();
//
//        } else if (caracter == 8) {//backspace
//            eliminaizq();
//            posc--;
//            System.out.println(posc);
//
//        } else {//son letras
//            insertacaracter();
//        }

    }//GEN-LAST:event_textoKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println(cont);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void textoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoKeyPressed

        String cadena = texto.getText();
        char caracter = evt.getKeyChar();

        if (evt.getExtendedKeyCode() == 36) {//inicio
            if (r == null) {
                System.out.println("lista vacia");
            } else {
                System.out.println(" inicio");
                Nodo recibido = nuevaraiz();
//                texto.setCaretPosition(1);
                System.out.println(recibido.getDatos());
            }

        } else if (caracter == 10) {//enter
            cont++;
            posc = -1;

        } else if (evt.getExtendedKeyCode() == 35) {//fin
            System.out.println(" Fin");
            letraA = nuevaraiz().getAnt();
            System.out.println(letraA.getDatos());

        } else if (evt.getExtendedKeyCode() == 127) {//suprimir
            if (posc == -1) {
                letraA = nuevaraiz();
                Nodo aux=letraA;

                eliminaizq();
                letraA=nuevaraiz();             
            }else{
            
            if (letraA.getSig() != r) {
                Nodo aux = letraA;
                letraA = letraA.getSig();
                eliminaizq();
                letraA = aux;
            } 
            }
                  System.out.println(letraA.getDatos());          

            System.out.println(" Supr");

        } else if (evt.getExtendedKeyCode() == 40) {//abajo
            System.out.println("  Abajo");

            if (r == null) {
                System.out.println("No hay datos en la lista");
            } else {
                Nodo re = nuevaraiz().getAbj();
                if (posc == 0) {
                    letraA = re;
                } else {
                    letraA = re;
                    letraA = posicionar();
                }
                System.out.println("Letra actual: " + letraA.getDatos());
                cont++;
            }

        } else if (evt.getExtendedKeyCode() == 38) {//arriba
            System.out.println("  Arriba");
            if (r == null) {
                System.out.println("No hay datos en la lista");
            } else {
                Nodo rec = nuevaraiz();
                if (posc == 0) {
                    letraA = rec.getArr();
                } else {
                    if (rec == null) {
                        posc = -1;
                    } else {
                        letraA = rec.getArr();
                        letraA = posicionar();

                    }
                }
                System.out.println("Letra Actual: " + letraA.getDatos());

                cont--;
                System.out.println(cont);
            }
        } else if (evt.getExtendedKeyCode() == 39) {//derecha
            System.out.println("  Derecha");
            Nodo aux = letraA;
            if (r == null) {
                System.out.println("lista vacia");
            } else {
                letraA = aux.getSig();
                System.out.println("Letra actual:" + letraA.getDatos());
                posc++;
            }
//            r = r.getSig();
        } else if (evt.getExtendedKeyCode() == 37) {//izquierda
            System.out.println("  Izquierda");
            Nodo aux = letraA.getAnt();
            if (letraA == r) {
                System.out.println("no se puede avanzar hacia la izquierda");

                posc = -1;
            } else {
                System.out.println("letra actual:  " + aux.getDatos());
                letraA = aux;
                posc--;
            }

        } else if (evt.getExtendedKeyCode() == 34) {//avpag
            System.out.println(" AvPag");
            letraA = bajar17().getAnt();
            System.out.println(letraA.getDatos());

        } else if (evt.getExtendedKeyCode() == 33) {//repag
            System.out.println(" RePag");
            letraA = subir17().getAnt();

        } else if (caracter == 8) {//backspace
            eliminaizq();
            posc--;
            System.out.println(posc);

        } else {//son letras
            if (evt.getKeyCode() >= 32 && evt.getKeyCode() <= 122) {
                insertacaracter(evt);
            }

        }
    }//GEN-LAST:event_textoKeyPressed
    public String[] crear() {
        etq = new String[cont];
        int cont2 = 0;
        Nodo aux = r;
        while (cont2 + 1 != cont) {
            etq[cont2] = aux.getDatos();
            aux = aux.getAbj();
            cont2++;
        }
        return etq;
    }

    public Nodo subir17() {
        Nodo aux = nuevaraiz();
        for (int i = 0; i < 17; i++) {
            if (aux.getArr() == null) {
                return aux;
            } else {
                aux = aux.getArr();
            }
        }
        return aux;
    }

    public Nodo bajar17() {
        Nodo aux = nuevaraiz();
        for (int i = 0; i < 17; i++) {
            if (aux.getAbj() == null) {
                return aux;
            } else {
                aux = aux.getAbj();
            }
        }
        return aux;
    }

    public Nodo posicionar() {
        int cont = 0;
        Nodo aux = letraA;
        boolean b = true;
        while (aux.getSig() != letraA && b) {
            aux = aux.getSig();
            cont++;

            if (cont == posc) {
                b = false;
            }
//            texto.setCaretPosition(cont + 1);
//            posc = cont;
        }
        return aux;
    }

    public Nodo nuevaraiz() {
        Nodo aux = r;
        for (int i = 0; i < cont - 1; i++) {
            aux = aux.getAbj();
        }
        return aux;
    }

    public void insertacaracter(KeyEvent evt) {
        String cadena = texto.getText();
        Nodo letra = new Nodo(String.valueOf((char) evt.getKeyCode()));

        if (cont == 1) {
            etq[0] = letra.getDatos();
            r = Multilistas.insertar2(r, letra, 0, etq, null);
        } else {
            etq = crear();
            etq[cont - 1] = letra.getDatos();
            r = Multilistas.insertar2(r, letra, 0, etq, null);
        }
        posc++;
        letraA = letra;
    }

    public void eliminaizq() {
        Nodo d[];
        Nodo nl = letraA.getAnt();
        if (cont == 1) {
            etq[0] = letraA.getDatos();
            d = Multilistas.elimina(r, 0, etq, letraA);
            r = d[0];
            System.out.println("se elimino: " + d[1].getDatos());

        } else {
            etq = crear();
            etq[cont - 1] = letraA.getDatos();
            d = Multilistas.elimina(r, 0, etq, letraA);
            r = d[0];
            System.out.println("Se elimino:" + d[1].getDatos());

        }
        if (posc == 0) {
            letraA = d[0].getAnt();
        } else {
            letraA = nl;
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea texto;
    // End of variables declaration//GEN-END:variables
}
